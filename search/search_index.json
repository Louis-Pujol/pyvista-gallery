{"config":{"lang":["en"],"separator":"[\\s\\-]+","pipeline":["stopWordFilter"]},"docs":[{"location":"","title":"Home","text":"<p>Hello, world !</p>"},{"location":"generated/gallery/","title":"Gallery","text":"<p>Here are some examples</p> <p> Static </p> <p> Pyvista Scraper </p> <p> Animation </p> <p> Vedo </p> <p> Download all examples in Python source code: gallery_python.zip</p> <p> Download all examples in Jupyter notebooks: gallery_jupyter.zip</p> <p>Gallery generated by mkdocs-gallery</p>"},{"location":"generated/gallery/mg_execution_times/","title":"Computation times","text":"<p>00:11.420 total execution time for generated_gallery files:</p> <p>+----------------------------------------------------------------------------+-----------+--------+ | plot_animation (docs/examples/plot_animation.py)    | 00:06.293 | 0.0 MB | +----------------------------------------------------------------------------+-----------+--------+ | plot_pv_scraper (docs/examples/plot_pv_scraper.py) | 00:04.423 | 0.0 MB | +----------------------------------------------------------------------------+-----------+--------+ | plot_static (docs/examples/plot_static.py)             | 00:00.512 | 0.0 MB | +----------------------------------------------------------------------------+-----------+--------+ | plot_vedo (docs/examples/plot_vedo.py)                   | 00:00.192 | 0.0 MB | +----------------------------------------------------------------------------+-----------+--------+</p>"},{"location":"generated/gallery/plot_animation/","title":"Animation","text":"<p>Note</p> <p>Click here to download the full example code</p>"},{"location":"generated/gallery/plot_animation/#animation","title":"Animation","text":"<p>Perform a collision detection between two meshes.</p> <p>This example uses the <code>collision</code> filter to detect the faces from one sphere colliding with another sphere.</p>"},{"location":"generated/gallery/plot_animation/#note","title":"Note","text":"<p>Due to the nature of the <code>vtk.vtkCollisionDetectionFilter    &lt;https://vtk.org/doc/nightly/html/classvtkCollisionDetectionFilter.html&gt;</code>,    repeated uses of this method will be slower that using the    <code>vtk.vtkCollisionDetectionFilter</code> directly.  The first    update of the filter creates two instances of <code>vtkOBBTree    &lt;https://vtk.org/doc/nightly/html/classvtkOBBTree.html&gt;</code>,    which can be subsequently updated by modifying the transform or    matrix of the input meshes.</p> <p>This method assumes no transform and is easier to use for    single collision tests, but it is recommended to use a    combination of <code>pyvista</code> and <code>vtk</code> for rapidly computing    repeated collisions.  See the <code>Collision Detection Example    &lt;https://kitware.github.io/vtk-examples/site/Python/Visualization/CollisionDetection/&gt;</code>_</p> <pre><code>import numpy as np\nimport pyvista as pv\n\npv.OFF_SCREEN = True\npv.BUILDING_GALLERY = True\n# pv.set_plot_theme(\"document\")\n</code></pre> <p>Create the main mesh and the secondary \"moving\" mesh.</p> <p>Collision faces will be plotted on this sphere, and to do so we initialize an initial <code>\"collisions\"</code> mask.</p> <pre><code>sphere0 = pv.Sphere()\nsphere0[\"collisions\"] = np.zeros(sphere0.n_cells, dtype=bool)\n\n# This mesh will be the moving mesh\nsphere1 = pv.Sphere(radius=0.6, center=(-1, 0, 0))\n\n\n#\u00a0%%\n# Setup the plotter open a movie, and write a frame after moving the sphere.\n\npl = pv.Plotter()\npl.enable_hidden_line_removal()\npl.add_mesh(sphere0, show_scalar_bar=False, cmap=\"bwr\")\npl.camera_position = \"xz\"\npl.add_mesh(sphere1, style=\"wireframe\", color=\"green\", line_width=5)\n# for this example\npl.open_gif(\"animation.gif\")\n# alternatively, to disable movie generation:\n# pl.show(auto_close=False, interactive=False)\ndelta_x = 0.05\nfor i in range(int(2 / delta_x)):\n    sphere1 = sphere1.translate([delta_x, 0, 0])\n    col, n_contacts = sphere0.collision(sphere1)\n\n    collision_mask = np.zeros(sphere0.n_cells, dtype=bool)\n    if n_contacts:\n        collision_mask[col[\"ContactCells\"]] = True\n    sphere0[\"collisions\"] = collision_mask\n    pl.clear_actors()\n    pl.add_mesh(sphere0, show_scalar_bar=False, cmap=\"bwr\")\n    pl.camera_position = \"xz\"\n    pl.add_mesh(sphere1, style=\"wireframe\", color=\"green\", line_width=5)\n    pl.write_frame()\n\n\npl.show()\n</code></pre> <p></p> <p>Total running time of the script: ( 0 minutes  6.293 seconds)</p> <p> Download Python source code: plot_animation.py</p> <p> Download Jupyter notebook: plot_animation.ipynb</p> <p>Gallery generated by mkdocs-gallery</p>"},{"location":"generated/gallery/plot_pv_scraper/","title":"Pyvista Scraper","text":"<p>Note</p> <p>Click here to download the full example code</p>"},{"location":"generated/gallery/plot_pv_scraper/#pyvista-scraper","title":"Pyvista Scraper","text":"<p>This examples shows how to add pyvista plots (static or animated) to the gallery.</p> <p>Importing pyvista</p> <pre><code>import pyvista as pv\n</code></pre> <p>make a gif of a sphere rotating</p> <pre><code>sphere = pv.Sphere()\npl = pv.Plotter()\npl.enable_hidden_line_removal()\npl.add_mesh(sphere, show_edges=True, color=\"tan\")\n# for this example\npl.open_gif(\"animation.gif\", fps=10)\n# alternatively, to disable movie generation:\n# pl.show(auto_close=False, interactive=False)\ndelta_x = 0.05\ncenter = sphere.center\nfor angle in range(0, 360, 10):\n\n    rot = sphere.rotate_x(angle, point=(0, 0, 0), inplace=False)\n\n    pl.clear_actors()\n    pl.add_mesh(rot, show_edges=True, color=\"tan\")\n    pl.write_frame()\n\n\npl.show()\n</code></pre> <p></p> <p>or simply show a static plot</p> <pre><code>sphere = pv.Sphere()\npl = pv.Plotter()\npl.add_mesh(sphere, show_edges=True, color=\"tan\")\npl.show()\n</code></pre> <p></p> <p>Total running time of the script: ( 0 minutes  4.423 seconds)</p> <p> Download Python source code: plot_pv_scraper.py</p> <p> Download Jupyter notebook: plot_pv_scraper.ipynb</p> <p>Gallery generated by mkdocs-gallery</p>"},{"location":"generated/gallery/plot_static/","title":"Static","text":"<p>Note</p> <p>Click here to download the full example code</p>"},{"location":"generated/gallery/plot_static/#static","title":"Static","text":"<p>Visualize a static plot with PyVista.</p> <pre><code>import pyvista as pv\n</code></pre> <p>Load a mesh.</p> <pre><code>sphere = pv.Sphere()\n\n\n#\u00a0%%\n# Plot the mesh.\n\npl = pv.Plotter()\npl.add_mesh(sphere, color=\"tan\", show_edges=True)\npl.show()\n\n#\u00a0%%\n# Print some infos about PyVista\n\nprint(f\"OFF_SCREEN : {pv.OFF_SCREEN}\")\nprint(f\"BUILDING_GALLERY : {pv.BUILDING_GALLERY}\")\n</code></pre> <p></p> <p>Out:</p> <pre><code>OFF_SCREEN : True\nBUILDING_GALLERY : True\n</code></pre> <p>Total running time of the script: ( 0 minutes  0.512 seconds)</p> <p> Download Python source code: plot_static.py</p> <p> Download Jupyter notebook: plot_static.ipynb</p> <p>Gallery generated by mkdocs-gallery</p>"},{"location":"generated/gallery/plot_vedo/","title":"Vedo","text":"<p>Note</p> <p>Click here to download the full example code</p>"},{"location":"generated/gallery/plot_vedo/#vedo","title":"Vedo","text":"<p>Visualize a static plot with PyVista.</p> <p>Load a mesh</p> <pre><code>from vedo import Plotter, Mesh, dataurl\nmesh = Mesh(dataurl+\"spider.ply\")\n</code></pre> <p>Plot the mesh</p> <pre><code>a = 1\nplt = Plotter(offscreen=True)\nplt.show(mesh, axes=11, bg='bb', bg2='navy', elevation=-30, interactive=False)\n</code></pre> <p></p> <p>Out:</p> <pre><code>&lt;vedo.plotter.Plotter object at 0x7f98e1fb3880&gt;\n</code></pre> <p>Plot another mesh</p> <pre><code>from vedo import dataurl, settings, Plotter, Mesh, Text2D\n\nsettings.background_gradient_orientation = 3  # radial gradient\n\n# Create an instance of the Plotter class, \n# which creates a default camera needed for silhouette()\nplt = Plotter(offscreen=True)\n\n# Create a Text2D object to display the docstring at the bottom-center of the plot,\n# using the Bongas font with a size of 2 and a dark green background\ntxt = Text2D(__doc__, pos=\"bottom-center\", font=\"Bongas\", s=2, bg=\"dg\")\n\n# Load a mesh of a human figure, disable lighting (reflections), \n# set the color to pink, and set the transparency to 0.5\nman = Mesh(dataurl + \"man.vtk\").lighting(\"off\").c(\"pink\").alpha(0.5)\n\n# Load a mesh of a teddy bear, scale and rotate it around the z-axis,\nted = Mesh(dataurl + \"teddy.vtk\").scale(0.4).rotate_z(-45).pos(-1, -1, -1)\nted.lighting(\"off\").c(\"sienna\").alpha(0.1)\n\n# Show the meshes, the default silhouette of the teddy bear mesh\nplt.show(\n    txt,\n    ted,\n    man,\n    ted.silhouette(),  # default silhouette of the teddy bear mesh\n    man.silhouette(feature_angle=40).linewidth(3).color(\"dr\"),\n    bg=\"white\",        # set the background color to wheat\n    bg2=\"blue8\",       # set the color of the gradient to light blue\n    elevation=-80,     # set the elevation angle of the camera\n    zoom=1.2,          # zoom in on the plot\n)\n</code></pre> <p></p> <p>Out:</p> <pre><code>&lt;vedo.plotter.Plotter object at 0x7f98e201b400&gt;\n</code></pre> <p>Total running time of the script: ( 0 minutes  0.192 seconds)</p> <p> Download Python source code: plot_vedo.py</p> <p> Download Jupyter notebook: plot_vedo.ipynb</p> <p>Gallery generated by mkdocs-gallery</p>"}]}